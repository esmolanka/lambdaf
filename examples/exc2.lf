(let
    ([computation
      `(do {x <- (readnum (readln))}
           (if x 0 (raise (:NegativeInput "Should be positive!")))
           (if (+ x -9000) (raise (:TooBig "Over 9000!")) 0)
           (writeln "OK"))]

     [catch-negative
      (lambda (k)
        (catch k
           [:NegativeInput msg ->
              (do (writeln "Caught a :NegativeInput exception:")
                  (writeln msg))]))]

     [catch-too-big
      (lambda (k)
        (catch k
           [:TooBig msg ->
              (do (writeln "Caught a :TooBig exception:")
                  (writeln msg))]))]

     [ensure-no-exceptions
      (lambda (k) (catch k [otherwise x -> (case x)]))])

  (do (writeln "Will catch negative:")
      (catch-negative computation)

      (writeln "Will catch too big (>9000):")
      (catch-too-big computation)

      (writeln "Will catch both exeptions:")
      (ensure-no-exceptions `(catch-negative `(catch-too-big computation)))))
